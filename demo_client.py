#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
"""
import requests
import json
import base64
from PIL import Image
import io

# URL –Ω–∞—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
PROXY_URL = "http://localhost:8000"

def test_health():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç health check endpoint
    """
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    try:
        response = requests.get(f"{PROXY_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {data}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")

def create_mock_api_response():
    """
    –°–æ–∑–¥–∞–µ—Ç mock API –æ—Ç–≤–µ—Ç —Å PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    """
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.new('RGBA', (200, 200), (0, 128, 255, 180))  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–∏–Ω–∏–π
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π
    from PIL import ImageDraw
    draw = ImageDraw.Draw(image)
    draw.rectangle([50, 50, 150, 150], fill=(255, 255, 0, 200))  # –ñ–µ–ª—Ç—ã–π –∫–≤–∞–¥—Ä–∞—Ç
    draw.ellipse([75, 75, 125, 125], fill=(255, 0, 0, 255))  # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    buffer = io.BytesIO()
    image.save(buffer, format='PNG')
    buffer.seek(0)
    png_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
    
    # –°–æ–∑–¥–∞–µ–º mock –æ—Ç–≤–µ—Ç
    mock_response = {
        "uuid": "demo-12345",
        "status": "success",
        "errorDescription": None,
        "result": {
            "files": [png_base64],
            "censored": False
        }
    }
    
    return mock_response

def save_image_from_base64(base64_data, filename, format_name):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ base64 –≤ —Ñ–∞–π–ª
    """
    try:
        image_data = base64.b64decode(base64_data)
        image = Image.open(io.BytesIO(image_data))
        image.save(filename)
        print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename} (—Ñ–æ—Ä–º–∞—Ç: {image.format}, —Ä–∞–∑–º–µ—Ä: {image.size})")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {filename}: {e}")
        return False

def simulate_api_request():
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –º–æ–∂–µ–º —Ä–µ–∞–ª—å–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ FusionBrain API –±–µ–∑ –∫–ª—é—á–∞,
    –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π mock —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ø–æ–∫–∞–∂–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    print("\nüé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...")
    
    # –°–æ–∑–¥–∞–µ–º mock –æ—Ç–≤–µ—Ç
    mock_response = create_mock_api_response()
    original_png = mock_response["result"]["files"][0]
    
    print("üì§ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   UUID: {mock_response['uuid']}")
    print(f"   –°—Ç–∞—Ç—É—Å: {mock_response['status']}")
    print(f"   –†–∞–∑–º–µ—Ä PNG –≤ base64: {len(original_png)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ PNG
    save_image_from_base64(original_png, "demo_original.png", "PNG")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–º
    from main import process_response_data
    processed_response = process_response_data(json.dumps(mock_response))
    processed_data = json.loads(processed_response)
    
    converted_jpeg = processed_data["result"]["files"][0]
    
    print("\nüì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   UUID: {processed_data['uuid']}")
    print(f"   –°—Ç–∞—Ç—É—Å: {processed_data['status']}")
    print(f"   –†–∞–∑–º–µ—Ä JPEG –≤ base64: {len(converted_jpeg)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ JPEG
    save_image_from_base64(converted_jpeg, "demo_converted.jpeg", "JPEG")
    
    print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("   ‚úÖ PNG —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ JPEG")
    print("   ‚úÖ –ê–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∑–∞–º–µ–Ω–µ–Ω –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º)")
    print("   ‚úÖ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    print("   üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: demo_original.png, demo_converted.jpeg")

def test_proxy_endpoint():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π endpoint —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    (—ç—Ç–æ –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã)
    """
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞...")
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É endpoint
        # –≠—Ç–æ –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É API
        response = requests.get(f"{PROXY_URL}/test/endpoint", timeout=5)
        print(f"üì° –û—Ç–≤–µ—Ç –ø—Ä–æ–∫—Å–∏: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        if response.headers.get('content-type', '').startswith('application/json'):
            try:
                data = response.json()
                print(f"üìÑ JSON –æ—Ç–≤–µ—Ç: {data}")
            except:
                print(f"üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {response.text[:200]}...")
        else:
            print(f"üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {response.text[:200]}...")
    except requests.exceptions.Timeout:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –≤–Ω–µ—à–Ω–µ–º—É API (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ)")
    except Exception as e:
        print(f"üì° –ü—Ä–æ–∫—Å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª –æ—à–∏–±–∫—É: {e}")

if __name__ == '__main__':
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã FusionBrain API Proxy\n")
    
    test_health()
    simulate_api_request() 
    test_proxy_endpoint()
    
    print("\n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
    print("   1. –ó–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ api-key.fusionbrain.ai –Ω–∞ http://localhost:8000")
    print("   2. –ü—Ä–æ–∫—Å–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PNG –≤ JPEG –≤ –ø–æ–ª–µ 'files'")
    print("   3. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π") 