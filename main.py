#!/usr/bin/env python3
import base64
import io
import json
import requests
from flask import Flask, request, jsonify, Response
from PIL import Image
import logging
import time
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = os.getenv('LOG_LEVEL', 'INFO').upper()
log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

logging.basicConfig(
    level=getattr(logging, log_level, logging.INFO),
    format=log_format,
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
perf_logger = logging.getLogger('performance')
perf_logger.setLevel(logging.INFO)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è SSL/TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
ssl_logger = logging.getLogger('ssl')
ssl_logger.setLevel(logging.INFO)

app = Flask(__name__)

# URL —Ü–µ–ª–µ–≤–æ–≥–æ API
TARGET_API_URL = "https://api-key.fusionbrain.ai"

def convert_png_to_jpeg(base64_png_data):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç base64 PNG –≤ base64 JPEG
    """
    start_time = time.time()
    try:
        logger.debug(f"–ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(base64_png_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        png_data = base64.b64decode(base64_png_data)
        logger.debug(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PNG –¥–∞–Ω–Ω—ã–µ: {len(png_data)} –±–∞–π—Ç")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
        image = Image.open(io.BytesIO(png_data))
        original_format = image.format
        original_mode = image.mode
        original_size = image.size
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —Ñ–æ—Ä–º–∞—Ç={original_format}, —Ä–µ–∂–∏–º={original_mode}, —Ä–∞–∑–º–µ—Ä={original_size}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (PNG –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª)
        if image.mode in ('RGBA', 'LA', 'P'):
            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ —Ä–µ–∂–∏–º–∞ {image.mode} –≤ RGB —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º")
            # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞
            background = Image.new('RGB', image.size, (255, 255, 255))
            if image.mode == 'P':
                image = image.convert('RGBA')
            background.paste(image, mask=image.split()[-1] if image.mode in ('RGBA', 'LA') else None)
            image = background
        elif image.mode != 'RGB':
            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ —Ä–µ–∂–∏–º–∞ {image.mode} –≤ RGB")
            image = image.convert('RGB')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG –≤ –±—É—Ñ–µ—Ä
        output_buffer = io.BytesIO()
        image.save(output_buffer, format='JPEG', quality=95)
        output_buffer.seek(0)
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        jpeg_base64 = base64.b64encode(output_buffer.getvalue()).decode('utf-8')
        
        end_time = time.time()
        conversion_time = end_time - start_time
        
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {original_format} -> JPEG")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä—ã: –≤—Ö–æ–¥–Ω–æ–π={len(base64_png_data)} -> –≤—ã—Ö–æ–¥–Ω–æ–π={len(jpeg_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
        perf_logger.info(f"–í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {conversion_time:.3f}s")
        
        return jpeg_base64
        
    except Exception as e:
        end_time = time.time()
        conversion_time = end_time - start_time
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logger.error(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {conversion_time:.3f}s")
        logger.error(f"üìä –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(base64_png_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        return base64_png_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å

def process_response_data(response_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è PNG –≤ JPEG –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    """
    start_time = time.time()
    try:
        logger.debug(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(response_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        data = json.loads(response_data)
        logger.debug("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω –∫–∞–∫ JSON")
        
        # –§–ª–∞–≥ - –Ω—É–∂–Ω–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        needs_processing = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è files –≤ result
        if isinstance(data, dict) and 'result' in data and isinstance(data['result'], dict):
            if 'files' in data['result'] and isinstance(data['result']['files'], list):
                files_count = len(data['result']['files'])
                logger.info(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ {files_count} —Ñ–∞–π–ª(–æ–≤) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ø–æ–ª–µ 'files'")
                converted_files = []
                
                for idx, file_data in enumerate(data['result']['files']):
                    if isinstance(file_data, str):
                        logger.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {idx + 1}/{files_count}")
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PNG –≤ JPEG
                        converted_file = convert_png_to_jpeg(file_data)
                        converted_files.append(converted_file)
                        if converted_file != file_data:
                            logger.info(f"‚úÖ –§–∞–π–ª {idx + 1} —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                            needs_processing = True
                        else:
                            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {idx + 1} –Ω–µ –±—ã–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞)")
                    else:
                        logger.debug(f"üìã –§–∞–π–ª {idx + 1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        converted_files.append(file_data)
                
                if needs_processing:
                    data['result']['files'] = converted_files
                    logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {files_count} —Ñ–∞–π–ª(–æ–≤)")
                else:
                    logger.debug("–§–∞–π–ª—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            else:
                logger.debug("–ü–æ–ª–µ 'files' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
        else:
            logger.debug("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'result.files'")
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        if needs_processing:
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è - –ø–µ—Ä–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º JSON
            processed_response = json.dumps(data, ensure_ascii=False, separators=(',', ':'))
            logger.debug(f"JSON –ø–µ—Ä–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            logger.debug(f"–†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {len(processed_response)} —Å–∏–º–≤–æ–ª–æ–≤")
            perf_logger.info(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {processing_time:.3f}s")
            return processed_response
        else:
            # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            logger.debug("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            logger.debug(f"–†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {len(response_data)} —Å–∏–º–≤–æ–ª–æ–≤")
            perf_logger.info(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞: {processing_time:.3f}s")
            return response_data
        
    except json.JSONDecodeError as e:
        logger.debug(f"–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON: {str(e)[:100]}...")
        logger.debug("–í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return response_data
    except Exception as e:
        end_time = time.time()
        processing_time = end_time - start_time
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        logger.error(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {processing_time:.3f}s")
        logger.error(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(response_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        return response_data

@app.route('/', defaults={'path': ''}, methods=['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'])
@app.route('/<path:path>', methods=['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'])
def proxy(path):
    """
    –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ü–µ–ª–µ–≤–æ–π API
    """
    request_start_time = time.time()
    client_ip = request.environ.get('HTTP_X_FORWARDED_FOR', request.environ.get('REMOTE_ADDR', 'unknown'))
    user_agent = request.headers.get('User-Agent', 'unknown')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ API
    target_url = f"{TARGET_API_URL}/{path}" if path else TARGET_API_URL
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(f"üîÑ –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url}")
    logger.info(f"üë§ –ö–ª–∏–µ–Ω—Ç: IP={client_ip}, UA={user_agent[:50]}...")
    logger.info(f"üéØ –¶–µ–ª—å: {target_url}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = request.args.to_dict()
    if params:
        logger.debug(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {params}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ
    headers = {}
    sensitive_headers = ['authorization', 'x-api-key', 'cookie']
    for key, value in request.headers:
        if key.lower() not in ['host', 'content-length']:
            headers[key] = value
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–∫—Ä—ã–≤–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if key.lower() in sensitive_headers:
                logger.debug(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {key}: [–°–ö–†–´–¢–û]")
            else:
                logger.debug(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {key}: {value}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    data = None
    data_size = 0
    if request.method in ['POST', 'PUT', 'PATCH']:
        if request.is_json:
            data = request.get_json()
            data_size = len(json.dumps(data)) if data else 0
            logger.info(f"üìÑ JSON –¥–∞–Ω–Ω—ã–µ: {data_size} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ DEBUG —Ä–µ–∂–∏–º–µ
            if logger.isEnabledFor(logging.DEBUG) and data:
                request_body = json.dumps(data, ensure_ascii=False, indent=2)
                max_request_log_size = 2000
                if len(request_body) <= max_request_log_size:
                    logger.debug(f"üì§ –¢–µ–ª–æ JSON –∑–∞–ø—Ä–æ—Å–∞: {request_body}")
                else:
                    logger.debug(f"üì§ –¢–µ–ª–æ JSON –∑–∞–ø—Ä–æ—Å–∞ (–ø–µ—Ä–≤—ã–µ {max_request_log_size} —Å–∏–º–≤–æ–ª–æ–≤): {request_body[:max_request_log_size]}...")
        else:
            data = request.get_data()
            data_size = len(data) if data else 0
            logger.info(f"üìÑ –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data_size} –±–∞–π—Ç")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ DEBUG —Ä–µ–∂–∏–º–µ (—Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä –∏ —Ç–∏–ø)
            if logger.isEnabledFor(logging.DEBUG) and data:
                content_type = request.headers.get('Content-Type', 'unknown')
                logger.debug(f"üì§ –ë–∏–Ω–∞—Ä–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {data_size} –±–∞–π—Ç, Content-Type: {content_type}")
                if data_size <= 200:  # –¢–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    logger.debug(f"üì§ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (hex): {data.hex()}")
    
    try:
        logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {request.method} –∑–∞–ø—Ä–æ—Å –Ω–∞ {target_url}")
        api_start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ü–µ–ª–µ–≤–æ–º—É API
        if data is not None:
            if isinstance(data, dict):
                response = requests.request(
                    method=request.method,
                    url=target_url,
                    params=params,
                    json=data,
                    headers=headers,
                    timeout=30
                )
            else:
                response = requests.request(
                    method=request.method,
                    url=target_url,
                    params=params,
                    data=data,
                    headers=headers,
                    timeout=30
                )
        else:
            response = requests.request(
                method=request.method,
                url=target_url,
                params=params,
                headers=headers,
                timeout=30
            )
        
        api_end_time = time.time()
        api_response_time = api_end_time - api_start_time
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å={response.status_code}, —Ä–∞–∑–º–µ—Ä={len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        perf_logger.info(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: {api_response_time:.3f}s")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        response_data = response.text
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –≤ DEBUG —Ä–µ–∂–∏–º–µ
        if logger.isEnabledFor(logging.DEBUG):
            max_log_size = 5000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if len(response_data) <= max_log_size:
                logger.debug(f"üìÑ –ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_data}")
            else:
                logger.debug(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ {max_log_size} —Å–∏–º–≤–æ–ª–æ–≤): {response_data[:max_log_size]}...")
                logger.debug(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): ...{response_data[-500:]}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            logger.debug("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:")
            for header_name, header_value in response.headers.items():
                logger.debug(f"   {header_name}: {header_value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –Ω–∞ JSON
        content_type = response.headers.get('content-type', '')
        if 'application/json' in content_type.lower():
            logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON –æ—Ç–≤–µ—Ç")
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON –æ—Ç–≤–µ—Ç
            processed_response = process_response_data(response_data)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ DEBUG —Ä–µ–∂–∏–º–µ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            if logger.isEnabledFor(logging.DEBUG) and processed_response != response_data:
                logger.debug("üîÑ –û—Ç–≤–µ—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                max_processed_log_size = 5000
                if len(processed_response) <= max_processed_log_size:
                    logger.debug(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {processed_response}")
                else:
                    logger.debug(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ {max_processed_log_size} —Å–∏–º–≤–æ–ª–æ–≤): {processed_response[:max_processed_log_size]}...")
                    logger.debug(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): ...{processed_response[-500:]}")
            elif logger.isEnabledFor(logging.DEBUG):
                logger.debug("üîÑ –û—Ç–≤–µ—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        else:
            logger.debug(f"üìÑ –û—Ç–≤–µ—Ç –Ω–µ JSON (Content-Type: {content_type}), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å")
            processed_response = response_data
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        response_headers = {}
        for key, value in response.headers.items():
            if key.lower() not in ['content-length', 'transfer-encoding', 'connection']:
                response_headers[key] = value
        
        request_end_time = time.time()
        total_request_time = request_end_time - request_start_time
        
        logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {response.status_code}")
        perf_logger.info(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {total_request_time:.3f}s")
        perf_logger.info(f"–†–∞–∑–º–µ—Ä—ã: –∑–∞–ø—Ä–æ—Å={data_size}, –æ—Ç–≤–µ—Ç={len(processed_response)}")
        
        return Response(
            processed_response,
            status=response.status_code,
            headers=response_headers
        )
        
    except requests.exceptions.Timeout as e:
        request_end_time = time.time()
        total_request_time = request_end_time - request_start_time
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {target_url}")
        logger.error(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ —Ç–∞–π–º–∞—É—Ç–∞: {total_request_time:.3f}s")
        return jsonify({"error": "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –≤–Ω–µ—à–Ω–µ–º—É API", "details": str(e)}), 504
    except requests.exceptions.ConnectionError as e:
        request_end_time = time.time()
        total_request_time = request_end_time - request_start_time
        logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {target_url}")
        logger.error(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {total_request_time:.3f}s")
        logger.error(f"üîç –î–µ—Ç–∞–ª–∏: {str(e)}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤–Ω–µ—à–Ω–∏–º API", "details": str(e)}), 502
    except requests.exceptions.RequestException as e:
        request_end_time = time.time()
        total_request_time = request_end_time - request_start_time
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        logger.error(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {total_request_time:.3f}s")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –≤–Ω–µ—à–Ω–µ–º—É API", "details": str(e)}), 500
    except Exception as e:
        request_end_time = time.time()
        total_request_time = request_end_time - request_start_time
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {total_request_time:.3f}s")
        logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "details": str(e)}), 500

@app.route('/health')
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    """
    return jsonify({"status": "healthy", "service": "FusionBrain API Proxy"})

if __name__ == '__main__':
    import ssl
    import os
    import sys
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    logger.info("=" * 60)
    logger.info("üöÄ FusionBrain API Proxy - –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞")
    logger.info("=" * 60)
    logger.info(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version.split()[0]}")
    logger.info(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"üéØ –¶–µ–ª–µ–≤–æ–π API: {TARGET_API_URL}")
    logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    cert_file = 'cert.pem'
    key_file = 'key.pem'
    
    if os.path.exists(cert_file) and os.path.exists(key_file):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            ssl_logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
            context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
            context.load_cert_chain(cert_file, key_file)
            
            ssl_logger.info(f"üìã –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {cert_file}")
            ssl_logger.info(f"üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {key_file}")
            
            logger.info("üîí –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTTPS –Ω–∞ –ø–æ—Ä—Ç—É 8000")
            logger.info("üìã HTTP:  http://localhost:8000")
            logger.info("üîê HTTPS: https://localhost:8000")
            logger.info("‚ö†Ô∏è  –î–ª—è HTTPS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
            logger.info("üåê –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            logger.info("=" * 60)
            
            app.run(host='0.0.0.0', port=8000, debug=False, ssl_context=context)
            
        except ssl.SSLError as e:
            ssl_logger.error(f"‚ùå –û—à–∏–±–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
            logger.error("üîí –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTPS, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ HTTP")
            logger.info("üìã HTTP: http://localhost:8000")
            logger.info("üåê –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            logger.info("=" * 60)
            app.run(host='0.0.0.0', port=8000, debug=False)
        except Exception as e:
            ssl_logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ SSL: {e}")
            logger.error("üîí –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTPS, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ HTTP")
            logger.info("üìã HTTP: http://localhost:8000")
            logger.info("üåê –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            logger.info("=" * 60)
            app.run(host='0.0.0.0', port=8000, debug=False)
    else:
        logger.warning("‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        logger.info("üí° –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./generate_ssl.sh")
        logger.info("üìã –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞")
        logger.info("üìã HTTP: http://localhost:8000")
        logger.info("üåê –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        logger.info("=" * 60)
        app.run(host='0.0.0.0', port=8000, debug=False) 