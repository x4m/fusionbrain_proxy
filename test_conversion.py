#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PNG –≤ JPEG
"""
import base64
import json
from main import convert_png_to_jpeg, process_response_data
from PIL import Image
import io

def create_test_png_base64():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
    """
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 100x100 —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º
    image = Image.new('RGBA', (100, 100), (255, 0, 0, 128))  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä –∫–∞–∫ PNG
    buffer = io.BytesIO()
    image.save(buffer, format='PNG')
    buffer.seek(0)
    
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
    png_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
    return png_base64

def test_conversion():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é PNG –≤ JPEG
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PNG –≤ JPEG...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PNG
    png_base64 = create_test_png_base64()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π PNG (—Ä–∞–∑–º–µ—Ä: {len(png_base64)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG
    jpeg_base64 = convert_png_to_jpeg(png_base64)
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ JPEG (—Ä–∞–∑–º–µ—Ä: {len(jpeg_base64)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ JPEG
    try:
        jpeg_data = base64.b64decode(jpeg_base64)
        jpeg_image = Image.open(io.BytesIO(jpeg_data))
        print(f"‚úÖ –§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {jpeg_image.format}")
        print(f"‚úÖ –†–µ–∂–∏–º —Ü–≤–µ—Ç–∞: {jpeg_image.mode}")
        print(f"‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {jpeg_image.size}")
        
        if jpeg_image.format == 'JPEG' and jpeg_image.mode == 'RGB':
            print("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

def test_json_processing():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É JSON –æ—Ç–≤–µ—Ç–∞
    """
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PNG
    png_base64 = create_test_png_base64()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JSON –æ—Ç–≤–µ—Ç
    test_response = {
        "uuid": "test-uuid",
        "status": "success",
        "errorDescription": None,
        "result": {
            "files": [png_base64],
            "censored": False
        }
    }
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π JSON —Å PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    processed_json = process_response_data(json.dumps(test_response))
    processed_data = json.loads(processed_json)
    
    print("‚úÖ JSON –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if 'result' in processed_data and 'files' in processed_data['result']:
        converted_file = processed_data['result']['files'][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        try:
            converted_data = base64.b64decode(converted_file)
            converted_image = Image.open(io.BytesIO(converted_data))
            
            if converted_image.format == 'JPEG':
                print("üéâ JSON –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {converted_image.format}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ñ–æ—Ä–º–∞—Ç: {converted_image.format}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª–µ files –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º JSON")

def test_invalid_data():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º base64
    print("üìù –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º base64...")
    result = convert_png_to_jpeg("invalid_base64_data")
    if result == "invalid_base64_data":
        print("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON
    print("üìù –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON...")
    result = process_response_data("invalid json data")
    if result == "invalid json data":
        print("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON")

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n")
    
    test_conversion()
    test_json_processing()
    test_invalid_data()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 