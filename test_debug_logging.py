#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
"""
import logging
import io
import json
from main import process_response_data, logger

def setup_debug_logging():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –∑–∞—Ö–≤–∞—Ç—á–∏–∫ –ª–æ–≥–æ–≤
    log_capture = io.StringIO()
    handler = logging.StreamHandler(log_capture)
    handler.setLevel(logging.DEBUG)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ª–æ–≥–≥–µ—Ä—É
    logger.setLevel(logging.DEBUG)
    logger.addHandler(handler)
    
    return log_capture, handler

def test_debug_response_logging():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ DEBUG —Ä–µ–∂–∏–º–µ
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤...")
    
    log_capture, handler = setup_debug_logging()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    test_response = '{"status":"success","data":[{"id":"1","name":"test"}]}'
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    processed = process_response_data(test_response)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
    log_output = log_capture.getvalue()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞" in log_output:
        print("‚úÖ DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" in log_output:
            print("‚úÖ –õ–æ–≥–∏—Ä—É–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ")
        else:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ")
            
        success = True
    else:
        print("‚ùå DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        success = False
    
    # –û—á–∏—â–∞–µ–º
    logger.removeHandler(handler)
    logger.setLevel(logging.INFO)
    
    return success

def test_debug_image_processing_logging():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    log_capture, handler = setup_debug_logging()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    fake_image = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg=="
    test_response = f'{{"uuid":"test","status":"success","result":{{"files":["{fake_image}"],"censored":false}}}}'
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    processed = process_response_data(test_response)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
    log_output = log_capture.getvalue()
    
    success = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    debug_checks = [
        ("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞", "–Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏"),
        ("–ù–∞–π–¥–µ–Ω–æ", "–ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤"),
        ("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"),
        ("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ —Ä–µ–∂–∏–º–∞", "–ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"),
        ("JSON –ø–µ—Ä–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω", "–ø–µ—Ä–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    ]
    
    for check_text, description in debug_checks:
        if check_text in log_output:
            print(f"‚úÖ –õ–æ–≥–∏—Ä—É–µ—Ç—Å—è {description}")
        else:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {description}")
            success = False
    
    # –û—á–∏—â–∞–µ–º
    logger.removeHandler(handler)
    logger.setLevel(logging.INFO)
    
    return success

def test_log_level_control():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–æ DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω—É–∂–Ω–æ–º —É—Ä–æ–≤–Ω–µ
    """
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –¢–µ—Å—Ç —Å INFO —É—Ä–æ–≤–Ω–µ–º
    log_capture_info = io.StringIO()
    handler_info = logging.StreamHandler(log_capture_info)
    handler_info.setLevel(logging.INFO)
    
    logger.setLevel(logging.INFO)
    logger.addHandler(handler_info)
    
    test_response = '{"status":"success","data":[{"id":"1"}]}'
    process_response_data(test_response)
    
    log_output_info = log_capture_info.getvalue()
    
    # –ù–∞ INFO —É—Ä–æ–≤–Ω–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å DEBUG —Å–æ–æ–±—â–µ–Ω–∏–π
    debug_present_in_info = "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞" in log_output_info
    
    logger.removeHandler(handler_info)
    
    # –¢–µ—Å—Ç —Å DEBUG —É—Ä–æ–≤–Ω–µ–º
    log_capture_debug = io.StringIO()
    handler_debug = logging.StreamHandler(log_capture_debug)
    handler_debug.setLevel(logging.DEBUG)
    
    logger.setLevel(logging.DEBUG)
    logger.addHandler(handler_debug)
    
    process_response_data(test_response)
    
    log_output_debug = log_capture_debug.getvalue()
    
    # –ù–∞ DEBUG —É—Ä–æ–≤–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è
    debug_present_in_debug = "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞" in log_output_debug
    
    logger.removeHandler(handler_debug)
    logger.setLevel(logging.INFO)
    
    if not debug_present_in_info and debug_present_in_debug:
        print("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        print(f"   DEBUG –≤ INFO —Ä–µ–∂–∏–º–µ: {debug_present_in_info}")
        print(f"   DEBUG –≤ DEBUG —Ä–µ–∂–∏–º–µ: {debug_present_in_debug}")
        return False

if __name__ == '__main__':
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n")
    
    tests_passed = 0
    total_tests = 3
    
    if test_debug_response_logging():
        tests_passed += 1
        
    if test_debug_image_processing_logging():
        tests_passed += 1
        
    if test_log_level_control():
        tests_passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if tests_passed == total_tests:
        print("üéâ DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        
    print("\nüí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   export LOG_LEVEL=DEBUG")
    print("   python main.py") 